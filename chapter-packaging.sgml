<chapt id="packaging">
  <heading>Debian kernel packages</heading>
  <sect id="source-pkg">
    <heading>Source package</heading>
    <p>

      To ensure that the latest kernel version, containing all the
      essential bug and security fixes is available on as many
      architectures as possible, starting with 2.6.12 the kernel team
      introduced a new packaging scheme. In it most of the
      kernel-related binary packages are built from a single source
      package <tt>linux-2.6</tt>. The 
      <tt>linux-2.6</tt> source package supports building of kernel
      images and headers for all currently supported
      architectures. Subsequent sections of this chapter document the
      naming and contents of the binary packages built from the
      <tt>linux-2.6</tt> source package.

    </p>
    <sect id="arch-indep">
      <heading>Architecture-independent packages</heading>
      <p>
      <taglist>
        <tag><tt>linux-source-<em>version</em></tt></tag> 
	  <item>

 	    This package contains the Debian kernel source
	    tarball. The patchlevel of the source is determined by the
	    Debian revision of the package, for example the version 2.6.26-2
	    of the package <tt>linux-source-2.6.26</tt> contains the
	    version 2.6.26 of the Debian kernel source patched to
	    patchlevel 2. Once the package is installed, the source
	    tarball is available at
	    <tt>/usr/src/linux-source-<em>version</em>.tar.bz2</tt>. For
	    the instructions on obtaining Debian kernel source with
	    arbitrary patchlevel, see <ref id="common-getting">.

	  </item>
	<tag><tt>linux-manual-<em>version</em></tt></tag>
	  <item>

	    This package contains the manual pages for the functions,
	    constituting the kernel API. These pages are installed
	    into <tt>/usr/share/man/man9/</tt>, and are accessible
	    with the standard <tt>man</tt> command. Due to filename
	    conflicts, only one <tt>linux-manual</tt> package may be
	    installed at any given time.

	  </item>
	<tag><tt>linux-doc-<em>version</em></tt></tag>
	  <item>

	    This package contains the rest of the kernel documentation
	    in various formats. It is installed in
	    <tt>/usr/share/doc/linux-doc-<em>version</em></tt>.

	  </item>
	<tag><tt>linux-patch-debian-<em>version</em></tt></tag>
	  <item>

	    This package contains all patches used to produce the
	    Debian kernel source. It also contains the scripts which
	    allow application or un-application of patchsets, bringing
	    the source to the desired patchlevel. After the
	    installation the patches are installed in
	    <tt>/usr/src</tt> as follows:

	    <taglist>
	    <tag><tt>/usr/src/kernel-patches/all/<em>version</em>/debian/</tt></tag>
	    <item>

	      This directory contains the hierarchy of subdirectories with individual
	      compressed patch files for a given version. Subdirectories indicate
	      source or purpose of the patches contained within it, like <tt>bugfix</tt>
	      (essential bugfixes), <tt>debian</tt> (Debian-specific patches) or
	      <tt>features</tt> (kernel features not yet merged upstream). Within
	      these directories patches are further subdivided by architecture.

	    </item>
	  <tag><tt>/usr/src/kernel-patches/all/<em>version</em>/debian/series/</tt></tag>
	    <item>

	      This directory contains the control files, which
	      determine which patches need to be applied (or
	      unapplied) to move from one patchlevel to another. These
	      are text files named <tt><em>N</em></tt> 
	      (or <tt><em>N</em>-extra</tt>), where <tt><em>N</em></tt>
	      is the number specifiying the patchlevel. The file 
	      <tt><em>N</em></tt> contains a
	      list of patches which need to be applied (in case when
	      the name of the patch prepended with plus) or unapplied
	      (if it is prepended with a minus) to move from
	      patchlevel <tt><em>N</em>-1</tt> to patchlevel
	      <tt><em>N</em></tt>.  For example, the file
	      <tt>1</tt> lists the patches which need
	      to be applied to go from the original Debian kernel source to
	      the patchlevel 1. Files
	      named <tt><em>N</em>-extra</tt> list
	      the architecture-specific patches, along with the
	      architectures they apply to. There is also a special file
	      <tt>orig-0</tt>, which lists the patches (scripts) which
	      were applied (run) in order to obtain the Debian kernel
	      source from upstream kernel source (by removing the parts
	      incompatible with DFSG). Invocation of a script is identified
	      by <tt>X</tt> in the first column in this file.

	    </item>
	  <tag><tt>/usr/src/kernel-patches/all/<em>version</em>/apply/debian</tt></tag>
	    <item>
	
              This script may be used to change the patchlevel of the
	      currently available source tree, when run from its
	      top-level directory. For usage example see <ref
	      id="common-getting">. Current patchlevel of the source tree
	      is stored in the <tt>version.Debian</tt> file in the top-level
	      directory, and script modifies it appropriately when switching
	      from one patchlevel to another. You can specify patchlevel <tt>orig</tt>
	      to remove all Debian-specific patches, rolling back to the original
	      Debian kernel source (differing from upstream by removal of
	      firmware and other problematic files, as well as changes required
	      for the resulting kernel to be buildable). Note that there is currently
	      a bug in the script, preventing rollbacks of more than one patchlevel.
	      For example, if your tree is currently at patchlevel 2, a command
	      <example>
$ /usr/src/kernel-patches/all/2.6.26/apply/debian orig
              </example>
	      is likely to fail, so use commands
	      <example>
$ /usr/src/kernel-patches/all/2.6.26/apply/debian 1
$ /usr/src/kernel-patches/all/2.6.26/apply/debian orig
	      </example>
	      i.e. switch the levels one by one instead.

	  <tag><tt>/usr/src/kernel-patches/all/<em>version</em>/unpatch/debian</tt></tag>
	    <item>
	
              This script brings the tree to the <tt>orig</tt> patchlevel (equivalent
	      to running <tt>/usr/src/kernel-patches/all/<em>version</em>/apply/debian orig</tt>).
	      See previous sections for discussion.

	    </item>  
	  </taglist>
	</item> 
        <tag><tt>linux-tree-<em>version</em></tt></tag> 
	<item>

	    This is a dummy package whose sole purpose is to satisfy
	    the build dependencies for a successful kernel build. In
	    the old kernel build system build-depending on the package
	    <tt>linux-tree-<em>version</em>-<em>N</em></tt>, provided
	    by the <tt>linux-tree-<em>version</em></tt>, would result
	    in the automatic installation of all the required source
	    and patch packages, and patching of the kernel source to
	    patchlevel <tt><em>N</em></tt> before building. It has
	    been obsoleted by the new common packaging system and is
	    provided for backward compatibility only.

	</item>
        <tag><tt>linux-support-<em>version</em>-<em>abiname</em></tt></tag> 
	<item>

            This package contains the support files for building of
            out-of-tree modules for given version and abiname.

	</item>
      </taglist>
      </p>
      </sect>
      <sect id="arch-dep">
        <heading>Architecture-dependent packages</heading>
	<p>

	  The kind of hardware the particular kernel package is
	  designed for is uniquely identified by the
	  <em>architecture</em>, <em>subarchitecture</em>, and
	  <em>flavour</em>. Kernels for most architectures are built
	  from the same Debian kernel source tree, which is obtained
	  using the procedure described in <ref id="source">. Each
	  architecture usually has multiple flavours of the binary
	  kernel images. Different flavours correspond to different
	  kernel configuration files, used to build the binary images
	  from the <strong>same</strong> kernel tree.

	</p>

	<p>

	  In order to build a working kernel for certain classes of
	  hardware or with a desired feature set, additional changes
	  to the Debian kernel source may be required. In that case,
	  the patch set applied to produce a modified tree determines
	  the subarchitecture.  Again, multiple flavours of binary
	  images may be built from the subarchitecture tree. For
	  example, the <tt>i386</tt> architecture has a number of
	  different flavours, such as <tt>486</tt>, <tt>686</tt> and
	  <tt>686-bigmem</tt>, built from the common Debian kernel source. It
	  also contains <tt>xen</tt> and <tt>openvz</tt>
	  subarchitectures. The source tree for
	  building the kernels for each of these subarchitectures is
	  obtained by applying additional patches to the Debian kernel
	  source. It may be used to build the <tt>xen-686</tt> and
	  <tt>openvz-686</tt> binary image flavours. The names of the
	  Debian binary packages incorporate the name of the flavour
	  and, if necessary, the name of the subarchitecture (there is
	  no need to worry about the name of the architecture, since
	  Debian tools will only allow installation of the packages
	  with "correct" architecture). If the arch does not have any
	  subarches, the subarch part is omitted from the name, as
	  indicated by the square brackets below.

	</p>
	<p>

	  Package names also include the <em>abiname</em>, a small
	  integer, which identifies the kernel's binary compatibility
	  level. The kernels with different abinames are binary
	  incompatible, so upgrading to a kernel with a different
	  abiname will most likely require recompilation of
	  third-party binary modules against the new kernel. The list
	  of architecture-dependent packages together with a short
	  description is given below.

        </p>
	<p>
	  <taglist>
	  <tag><tt>linux-headers-<em>version</em>-<em>abiname</em>-common[-<em>subarch</em>]</tt></tag>
	  <item>

	    This package contains a common set of kernel headers for a
	    particular subarch (or arch, if subarch is
	    empty). Together with the flavour-specific
	    <tt>linux-headers</tt> package it provides a full set of
	    kernel headers, suitable for building of out-of-tree
	    modules. This package should not normally be installed
	    directly, but only as a dependency of the flavour-specific
	    headers package (see next description). It unpacks into
	    the
	    <tt>/usr/src/linux-headers-<em>version</em>-<em>abiname</em>-common[-<em>subarch</em>]</tt>
	    directory.

	  </item>
	  </taglist>
	  <taglist>
	  <tag><tt>linux-headers-<em>version</em>-<em>abiname</em>[-<em>subarch</em>]-<em>flavour</em></tt></tag>
	  <item>

	    This package provides flavour-specific header files. It
	    depends on the corresponding
	    <tt>linux-headers-<em>version</em>-<em>abiname</em>-common[-<em>subarch</em>]</tt>
	    package, and sets up symbolic links into its directory
	    tree in such a way that the directory
	    <tt>/usr/src/linux-headers-<em>version</em>-<em>abiname</em>[-<em>subarch</em>]-<em>flavour</em></tt>
	    appears to contain a full set of headers, required for
	    building of out-of-tree kernel modules.  For more
	    information on this check out <ref
	    id="common-out-of-tree">. A complete set of kernel headers
	    matching the currently running official kernel may be
	    installed with a command

	    <example>
apt-get install linux-headers-$(uname -r)
            </example>

	  </item>
	  <tag><tt>linux-image[-<em>subarch</em>]-<em>flavour</em></tt></tag>
	  <item>
	    <p>
	      This is a virtual package, providing (via dependencies) the latest
	      binary image for a particular flavour. Example: <tt>linux-image-openvz-686</tt>.
	  </item>
	  <tag><tt>linux-image-2.6[-<em>subarch</em>]-<em>flavour</em></tt></tag>
	  <tag><tt>linux-headers-2.6[-<em>subarch</em>]-<em>flavour</em></tt></tag>
	  <item>
	    <p>
	      These virtual packages provide (via dependencies) the latest 
	      2.6 series binary image and matching set of header files (respectively) 
	      for a particular flavour. Example: <tt>linux-image-2.6-openvz-686</tt>
	  </item>
	  <tag><tt>linux-image-<em>version</em>-<em>abiname</em>[-<em>subarch</em>]-<em>flavour</em></tt></tag>
	  <item>
	    <p>
	      This package contains the binary kernel image and
	      pre-built binary modules for a particular
	      arch/subarch/flavour combination. Names of the files
	      installed by this package are
	      architecture-dependent. Typical locations of essential
	      files for the <tt>i386</tt> architecture are:
	      <taglist>
	        <tag><tt>/boot/vmlinuz-<em>version</em>-<em>abiname</em>[-<em>subarch</em>]-<em>flavour</em></tt></tag>
		<item>
		  The binary (compressed) kernel image.
		</item>
	        <tag><tt>/boot/initrd.img-<em>version</em>-<em>abiname</em>[-<em>subarch</em>]-<em>flavour</em></tt></tag>
		<item>
		  Initial RAM filesystem (initramfs) image. Note, that this file is automatically generated
		  in the installation process and is <strong>not</strong> shipped as a part of the package.
		  See <ref id="initramfs"> for more details.
		</item>
		<tag><tt>/boot/config-<em>version</em>-<em>abiname</em>[-<em>subarch</em>]-<em>flavour</em></tt></tag>
		<item>
		  The kernel configuration file used to build this particular kernel. May be used
		  to rebuild the kernel from source, if necessary.
		</item>
		<tag><tt>/lib/modules/<em>version</em>-<em>abiname</em>[-<em>subarch</em>]-<em>flavour</em>/</tt></tag>
		<item>
		  Directory containing the pre-built binary kernel modules.
		</item>
	      </taglist>
	  </item>
	  <tag><tt>linux-libc-dev</tt></tag>
	  <item>
	    <p>
	      This package provides Linux kernel headers for use by userspace programs,
	      such as GNU glibc and other system libraries.
	    </p>
	  </item>
	  </taglist>
	</p>
      </sect>
    </chapt>
