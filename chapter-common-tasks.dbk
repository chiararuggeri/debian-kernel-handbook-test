<?xml version='1.0' encoding='utf-8'?>
<!-- -*- DocBook -*- -->
<chapter id="ch-common-tasks">
<?dbhtml filename="ch-common-tasks.html" ?>
<title>Common kernel-related tasks</title>
<section id="s-common-getting"><title>Obtaining the Debian kernel source</title>
<para>
To get the Debian kernel source at the current maximum patchlevel, it is
sufficient to install the latest
<literal>linux-source-<replaceable>version</replaceable></literal> package and unpack
the source, for example:
</para>
<screen>
# apt-get install linux-source-3.2
$ tar jxf /usr/src/linux-source-3.2.tar.bz2
</screen>
<para>
The unpacked source tree then will be available in
<literal>linux-source-3.2</literal> directory.
</para>
</section>

<section id="s-common-official"><title>Rebuilding official Debian kernel packages</title>
<para>
You can build all or selected kernel packages by following these instructions.
You may be asked to do this in order to test a potential bug fix.
</para>
<section id="s4.2.1"><title>Preparation</title>
<para>
For Debian 6.0 (squeeze) and earlier versions, substitute the source package
name <literal>linux-2.6</literal> for <literal>linux</literal>.
</para>
<para>
Run the following commands:
</para>
<variablelist>
<varlistentry>
<term><literal># apt-get install build-essential fakeroot</literal></term>
<term><literal># apt-get build-dep linux</literal></term>
<listitem>
<para>
This will install the packages required by the kernel build process.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>$ apt-get source linux</literal></term>
<listitem>
<para>
This will download and unpack the <literal>linux</literal> source package,
making the tree available in the
<literal>linux-<replaceable>version</replaceable></literal> directory.  As always,
the revision part of the version of this package (for example, 1 in 3.2.19-1)
will determine its patchlevel with respect to the original upstream kernel
source.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>$ cd linux-<replaceable>version</replaceable></literal></term>
<listitem>
<para>
Enter the source directory.
</para>
</listitem>
</varlistentry>
</variablelist>
<section id="s-common-size"><title>Disk space requirements</title>
<para>
Building binary packages for a single kernel flavour with debug info enabled
(currently true for the <literal>686-pae</literal>, <literal>amd64</literal>,
<literal>rt-686-pae</literal>, <literal>rt-amd64</literal> and
<literal>s390x</literal> configurations) requires up to 10 GB space in the
package directory and 300 MB in <literal>/tmp</literal> (or
<literal>$TMPDIR</literal>).
</para>
<para>
Building with debug info disabled requires about 2 GB and 25 MB respectively.
You can disable debug info by changing the value of
<literal>debug-info</literal> to <literal>false</literal> in
<literal>debian/config/</literal><replaceable>arch</replaceable><literal>/defines</literal>.
</para>
<para>
Building all binary packages for i386 or amd64 currently requires about 20 GB
space in the package directory.  Other architectures with no debug info or
fewer drivers will require less space.
</para>
</section>

</section>

<section id="s4.2.2"><title>Simple patching and building</title>
<para>
The source package includes a script to simplify the process of building with
extra patches.  You can use this by running commands such as:
</para>
<screen>
# apt-get install devscripts
$ bash debian/bin/test-patches ../fix-bug123456.patch ../add-foo-driver.patch
</screen>
<para>
This script has options to control the flavour, featureset, etc.  For a summary
of the options, run:
</para>
<screen>
$ bash debian/bin/test-patches
</screen>
<para>
You may then need to build the linux-base package as well:
</para>
<screen>
$ fakeroot make -f debian/rules.real install-linux-base
</screen>
<para>
However, if you need to change the configuration or make other changes, you
should not use this script and should follow the instructions below.
</para>
</section>

<section id="s4.2.3"><title>Applying patches or configuration changes</title>
<para>
It is possible to apply extra patches to the source before starting the build.
In the <literal>linux</literal> source package, the default (non-featureset)
patches are automatically applied in the top level directory.  If you are
building the <literal>linux-2.6</literal> source package or building with a
featureset, you should first apply the existing patches by running:
</para>
<screen>
$ fakeroot debian/rules source
</screen>
<para>
The patched source appears in the following directories.
</para>
<variablelist>
<varlistentry>
<term>linux default source:</term>
<listitem>
<para>
top level
</para>
</listitem>
</varlistentry>
<varlistentry>
<term>linux source with featureset:</term>
<listitem>
<para>
<literal>debian/build/source_<replaceable>featureset</replaceable></literal>
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>linux-2.6</literal> default source:</term>
<listitem>
<para>
<literal>debian/build/source_<replaceable>arch</replaceable>_none</literal>
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>linux-2.6</literal> source with featureset:</term>
<listitem>
<para>
<literal>debian/build/source_<replaceable>arch</replaceable>_<replaceable>featureset</replaceable></literal>
</para>
</listitem>
</varlistentry>
</variablelist>
<para>
You should apply the extra patches in the appropriate directory.  In the
<literal>linux</literal> source package you can use the
<literal>quilt</literal> utility to do this.
</para>
<para>
To change the configuration before building, for example for the 686-pae
flavour on i386, run the commands:
</para>
<screen>
$ fakeroot make -f debian/rules.gen setup_i386_none_686-pae
$ make -C debian/build/build_i386_none_686-pae menuconfig
</screen>
<para>
If the patches or configuration changes alter type definitions for the kernel,
you may need to change the ABI name; see <xref linkend="s-abi-name"/>.
</para>
</section>

<section id="s4.2.4"><title>Building many packages</title>
<para>
To build all possible packages for this architecture, run:
</para>
<screen>
$ fakeroot debian/rules binary
</screen>
<para>
To build all architecture-dependent packages, run:
</para>
<screen>
$ fakeroot debian/rules binary-arch
</screen>
<para>
To build all architecture-independent packages, run:
</para>
<screen>
$ fakeroot debian/rules binary-indep
</screen>
</section>

<section id="s4.2.5"><title>Building packages for one flavour</title>
<para>
For example, to build only the binary packages for 686-pae flavour on i386
architecture, use the following commands:
</para>
<screen>
$ fakeroot debian/rules source
$ fakeroot make -f debian/rules.gen binary-arch_i386_none_686-pae
</screen>
<para>
The target in this command has the general form of
<literal><replaceable>target</replaceable>_<replaceable>arch</replaceable>_<replaceable>featureset</replaceable>_<replaceable>flavour</replaceable></literal>.
Replace the <literal><replaceable>featureset</replaceable></literal> with
<literal>none</literal> if you do not want any of the extra featuresets.  This
command will build the linux image and kernel headers packages.  You may also
need the <literal>linux-headers-<replaceable>version</replaceable>-common</literal>
binary package, which can be built using the commands:
</para>
<screen>
$ fakeroot debian/rules source
$ fakeroot make -f debian/rules.gen binary-arch_i386_none_real
</screen>
<para>
The target in this command has the general form of
<literal><replaceable>target</replaceable>_<replaceable>arch</replaceable>_<replaceable>featureset</replaceable>_<replaceable>real</replaceable></literal>
</para>
</section>

</section>

<section id="s-common-official-vcs"><title>Building a development version of the Debian kernel package</title>
<para>
For Debian 6.0 (squeeze) and earlier versions, substitute the source package
name <literal>linux-2.6</literal> for <literal>linux</literal>.
</para>
<para>
To build a kernel image based on the kernel team's unreleased development
version:
</para>
<variablelist>
<varlistentry>
<term><literal># apt-get install build-essential fakeroot rsync git</literal></term>
<term><literal># apt-get build-dep linux</literal></term>
<listitem>
<para>
The last two commands will install the build dependencies required by the
kernel build process.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>$ git clone -b <replaceable>dist</replaceable> --single-branch https://anonscm.debian.org/git/kernel/linux.git</literal></term>
<listitem>
<para>
This will check out the Debian packaging.  <replaceable>dist</replaceable> is
normally the distribution codename such as <literal>wheezy</literal> or
<literal>sid</literal> (unstable).  For the very latest version, usually based
on an upstream release candidate, use <literal>master</literal>.  Note that
this will download several hundred megabytes of data.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>$ apt-get source -d linux</literal></term>
<listitem>
<para>
This will download the <literal>linux</literal> upstream source (and the last
released Debian patches).  Depending on which version you are trying to build,
you might need to override APT's version selection or download a tarball from
<ulink url="http://people.debian.org">people.debian.org</ulink> instead.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>$ cd linux</literal></term>
<term><literal>$ debian/rules orig</literal></term>
<listitem>
<para>
This unpacks the upstream source and merges it with the Debian packaging.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>$ debian/rules debian/control</literal></term>
<listitem>
<para>
This generates a Debian package control file based on the current definitions
of the various kernel flavours which can be built.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>$ fakeroot debian/rules <replaceable>target</replaceable></literal></term>
<listitem>
<para>
Finally, build binary packages as explained in <xref
linkend="s-common-official"/>.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section id="s-gen-orig"><title>Generating orig tarball from newer upstream</title>
<para>
First you must add a changelog entry for the new upstream version.  If the new
version is a release candidate, change the string <literal>-rc</literal> to
<literal>~rc</literal>.  (In Debian package versions, a suffix beginning with
<literal>~</literal> indicates a pre-release.)
</para>
<para>
The 'orig' tarball is generated by the <literal>genorig.py</literal> script.
It takes either a tarball and optional patch from kernel.org, or a git
repository.  First ensure you have the necessary tools installed:
</para>
<screen>
# apt-get install unifdef
</screen>
<para>
Then if you have a tarball, run a command such as:
</para>
<screen>
$ debian/bin/genorig.py ../linux-3.4.tar.bz2 ../patch-3.5-rc1.bz2
</screen>
<para>
Or if you have a git repository, pass the name of its directory:
</para>
<screen>
$ debian/bin/genorig.py ~/src/linux
</screen>
<para>
Either of these will generate a file such as
<literal>../orig/linux_3.5~rc1.orig.tar.xz</literal>.  You can then combine
this tarball with the Debian packaging by running:
</para>
<screen>
$ debian/rules orig
</screen>
</section>

<section id="s-common-building"><title>Building a custom kernel from Debian kernel source</title>
<para>
This section describes the simplest possible procedure to build a custom kernel
the "Debian way".  It is assumed that user is somewhat familiar with kernel
configuration and build process.  If that's not the case, it is recommended to
consult the kernel documentation and many excellent online resources dedicated
to it.
</para>
<para>
The easiest way to build a custom kernel (the kernel with the configuration
different from the one used in the official packages) from the Debian kernel
source is to use the <literal>linux-source</literal> package and the
<literal>make deb-pkg</literal> target.  First, prepare the kernel tree:
</para>
<screen>
# apt-get install linux-source-3.2
$ tar xjf /usr/src/linux-source-3.2.tar.bz2
$ cd linux-source-3.2
</screen>
<para>
The kernel now needs to be configured, that is you have to set the kernel
options and select the drivers which are going to be included, either as
built-in, or as external modules.  The kernel build infrastructure offers a
number of targets, which invoke different configuration frontends.  For
example, one can use console-based menu configuration by invoking the command
</para>
<screen>
$ make menuconfig
</screen>
<para>
Instead of <literal>menuconfig</literal> one can use <literal>config</literal>
(text-based line-by-line configuration frontend) or <literal>xconfig</literal>
(graphical configuration frontend).  It is also possible to reuse your old
configuration file by placing it as a <literal>.config</literal> file in the
top-level directory and running one of the configuration targets (if you want
to adjust something) or <literal>make oldconfig</literal> (to keep the same
configuration).  Note that different frontends may require different additional
libraries and utilities to be installed to function properly.  For example, the
<literal>menuconfig</literal> frontend requires the <literal>ncurses</literal>
library, which at time of writing is provided by the
<literal>libncurses5-dev</literal> package.
</para>
<para>
The build will use less disk space if the CONFIG_DEBUG_INFO option is disabled
(see <xref linkend="s-common-size"/>).  Debuginfo is only needed if you plan to
use binary object tools like crash, kgdb, and SystemTap on the kernel.
</para>
<screen>
$ scripts/config --disable DEBUG_INFO
</screen>
<para>
After the configuration process is finished, the new or updated kernel
configuration will be stored in <literal>.config</literal> file in the
top-level directory.  The build is started using the commands
</para>
<screen>
$ make clean
$ make deb-pkg
</screen>
<para>
As a result of the build, a custom kernel package
<literal>linux-image-3.2.19_3.2.19-1_i386.deb</literal> (name will reflect the
version of the kernel and build number) will be created in the directory one
level above the top of the tree.  It may be installed using
<literal>dpkg</literal> just as any other package:
</para>
<screen>
 
# dpkg -i ../linux-image-3.2.19_3.2.19-1_i386.deb
</screen>
<para>
This command will unpack the kernel, generate the initrd if necessary (see
<xref linkend="ch-initramfs"/> for details), and configure the bootloader to make
the newly installed kernel the default one.  If this command completed without
any problems, you can reboot using the
</para>
<screen>
# shutdown -r now
</screen>
<para>
command to boot the new kernel.
</para>
<para>
For much more information about bootloaders and their configuration please
check their documentation, which can be accessed using the commands
<literal>man lilo</literal>, <literal>man lilo.conf</literal>, <literal>man
grub</literal>, and so on.  You can also look for documentation in the
<literal>/usr/share/doc/<replaceable>package</replaceable></literal> directories,
with <literal><replaceable>package</replaceable></literal> being the name of the
package involved.
</para>
</section>

<section id="s-kernel-org-package"><title>Building a custom kernel from the "pristine" kernel source</title>
<para>
Building a kernel from the "pristine" (also sometimes called "vanilla") kernel
source, distributed from <ulink
url="http://www.kernel.org">www.kernel.org</ulink> and its mirrors, may be
occasionally useful for debugging or in the situations when a newer kernel
version is desired.  The procedure differs only in obtaining the kernel source:
instead of unpacking the kernel source from Debian packages, the "pristine"
source is downloaded using your favourite browser or using wget, as follows:
</para>
<screen>
 
$ wget http://kernel.org/pub/linux/kernel/v3.x/linux-3.4.tar.bz2
</screen>
<para>
The integrity of the downloaded archive may be verified by fetching the
corresponding cryptographic signature
</para>
<screen>
 
$ wget http://kernel.org/pub/linux/kernel/v3.x/linux-3.4.tar.sign
</screen>
<para>
and running this command (<literal>gnupg</literal> package must be installed):
</para>
<screen>
$ bunzip2 -c linux-3.4.tar.bz2 | gpg --verify linux-3.4.tar.sign -
</screen>
<para>
Successful verification results in output similar to the one below:
</para>
<screen>
gpg: Signature made Mon 21 May 2012 01:48:14 AM CEST using RSA key ID 00411886
gpg: Good signature from "Linus Torvalds &lt;torvalds@linux-foundation.org&gt;"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: ABAF 11C6 5A29 70B1 30AB  E3C4 79BE 3E43 0041 1886
</screen>
<para>
After that the archive may be unpacked using
</para>
<screen>
$ tar xjf linux-3.4.tar.bz2
$ cd linux-3.4
</screen>
<para>
The unpacked kernel tree (in <literal>linux-3.4</literal> now has to be
configured.  The existing configuration file may be used as a starting point
</para>
<screen>
$ cp /boot/config-3.2.0-2-686-pae ./.config
</screen>
<para>
After the configuration with one of the configuration frontends (invoked by
<literal>make oldconfig</literal>, <literal>make config</literal>,
<literal>make menuconfig</literal>, etc) is completed, the build may be started
using <literal>make deb-pkg</literal> target as described above.
</para>
</section>

<section id="s-common-out-of-tree"><title>Building out-of-tree kernel modules</title>
<para>
Some kernel modules are not included in the upstream or Debian kernel source,
but are provided as third-party source packages.  For some of the most popular
out-of-tree modules, the binary Debian packages with modules built against the
stock Debian kernels are provided.  For example, if you are running stock
Debian kernel <literal>3.2.0-2-686-pae</literal> (use the <literal>uname
-r</literal> command to verify the version) from the
<literal>linux-image-3.2.0-2-686-pae</literal> package, and would like to use
the squash filesystem, all you need to do is install
<literal>squashfs-modules-3.2.0-2-686-pae</literal> binary package, which
provides the neccessary binary kernel modules.
</para>
<para>
If you are not so lucky, and there are no binary module packages in the
archive, there is a fair chance that the Debian archive contains the packaged
<replaceable role="strong">source</replaceable> for the kernel modules.  Names of
such packages typically end in <literal>-source</literal>, for example
<literal>squashfs-source</literal>, <literal>thinkpad-source</literal>,
<literal>rt2x00-source</literal> and many others.  These packages contain
debianized source code of the kernel modules, suitable for building using the
<literal>module-assistant</literal> (or <literal>m-a</literal>) script from the
<literal>module-assistant</literal> package.  Typical sequence to build a
custom binary module package, matching a kernel
<literal>3.2.0-2-686-pae</literal> (as returned by <literal>uname -r</literal>)
from the debianized source consists of the following steps:
</para>
<para>
Install a set of kernel headers, matching the kernel for which the modules are
going to be built:
</para>
<screen>
# apt-get install linux-headers-3.2.0-2-686-pae
</screen>
<para>
Install the package containing the source:
</para>
<screen>
# apt-get install squashfs-source
</screen>
<para>
Invoke <literal>module-assistant</literal> (aka <literal>m-a</literal>) to do
the heavy lifting:
</para>
<screen>
# m-a build squashfs
</screen>
<para>
As a result, a Debian package is going to be built and placed in
<literal>/usr/src</literal>.  It can be installed the usual way, using
<literal>dpkg -i</literal>.  Two last steps (building and installation) may be
combined using the invocation
</para>
<screen>
# m-a auto-install squashfs
</screen>
<para>
Check out the <literal>module-assistant</literal> documentation (<literal>man
module-assistant</literal>) for other options and much more information on how
to use it.
</para>
<para>
Finally, in some rare circumstances, you might need to build the kernel modules
from the upstream source packages.  In that case, follow the documentation
included with the package to build the modules.  If the build process will
require you to specify the directory with the kernel headers, matching the
currently running kernel, for stock Debian kernels this directory is
<literal>/usr/src/linux-headers-<replaceable>uname</replaceable></literal>, provided
by the <literal>linux-headers-<replaceable>uname</replaceable></literal> package.
Here <literal><replaceable>uname</replaceable></literal> is the output of the
<literal>uname -r</literal> command.  If you are building and running your own
custom kernels, it is a good idea to keep the original build tree around, as it
also can be used for out-of-tree module building.
</para>
</section>

</chapter>

