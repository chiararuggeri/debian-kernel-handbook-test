<!doctype debiandoc system [
<!-- include version information so we don't have to hard code it
     within the document -->
<!entity % versiondata SYSTEM "version.ent"> %versiondata;
<!entity chapter-scope  SYSTEM "chapter-scope.sgml">
<!entity chapter-source SYSTEM "chapter-source.sgml">
<!entity chapter-packaging SYSTEM "chapter-packaging.sgml">
<!entity chapter-common-tasks SYSTEM "chapter-common-tasks.sgml">
]>
<debiandoc>

  <book>
    <titlepag>
      <title>Debian Linux Kernel Handbook</title>
      <author><qref id="authors">The Debian Kernel Handbook Project</qref></author>
      <version>version &version;, &date;</version>

      <copyright>
	<copyrightsummary>
	  Copyright &copy; 2005, 2006 Debian Kernel Handbook Project
	</copyrightsummary>
	<p>
	  This handbook is free software; you may redistribute it and/or
	  modify it under the terms of the GNU General Public License
	  as published by the Free Software Foundation; either version
	  2, or (at your option) any later version.
	</p>

	<p>
	  This is distributed in the hope that it will be useful, but
	  <em>without any warranty</em>; without even the implied
	  warranty of merchantability or fitness for a particular
	  purpose.  See the GNU General Public License for more
	  details.
	</p>

	<p>
	  A copy of the GNU General Public License is available as
	  <file>/usr/share/common-licenses/GPL</file> in the Debian GNU/Linux
	  distribution or on the World Wide Web at
	  <url id="http://www.gnu.org/copyleft/gpl.html"
	       name="the GNU General Public Licence">. You can also
	  obtain it by writing to the Free Software Foundation, Inc.,
	  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
	</p>
      </copyright>
    </titlepag>

    <toc detail="sect1">

    &chapter-scope;
    &chapter-source;
    &chapter-packaging;
    &chapter-common-tasks;

    <chapt id="modules">
      <heading>Managing the kernel modules</heading>
    </chapt>
    <chapt id="initramfs">
      <heading>Managing the initial ramfs (initramfs) archive</heading>
      <p>
        <strong>Note:</strong> the information in this section mostly applies
	to the kernel packages starting with version 2.6.12.
      </p>
      <p>
        The boot process in Debian is a two-stage process, involving
	the initial RAM filesystem (initramfs for short, sometimes it
	is also referred to as initrd, which stands for initial RAM
	disk). First, the bootloader loads the kernel and initramfs
	into memory, and passes the execution control to the
	kernel. After basic initialization the kernel extracts the
	initramfs archive and mounts it as a temporary root
	filesystem. initramfs contains kernel modules and userspace
	programs required to initialize the physical or logical
	device(s) containing the real root filesystem. The
	<tt>init</tt> script on the initramfs loads modules and
	performs other neccessary initialization steps. At the end of
	this stage <tt>run-init</tt> deletes the initramfs from
	memory, mounts the real root filesystem and passes control to
	the <tt>/sbin/init</tt> program on it.
      </p>
      <p>
        Two major goals are achieved with such setup: the kernel size
	is kept under control by allowing most of the drivers to be
	compiled as modules (in a initramfs-less setup the drivers
	neccessary for the boot-time initialization of the root device
	must be compiled into it) and allow the setups which require
	initialization which cannot be done in-kernel, but is performed
	by userspace utilities.
      </p>
      <sect id="initramfs-gen-tools">
        <heading>Initramfs generation tools</heading>
      <p>
        Since initramfs usually needs to be customized for the particular
	hardware/device configuration and kernel version, they are not
	included as a part of any package, but are generated on the
	fly at kernel installation time. Currently there are two tools
	in Debian, capable of creating an initramfs for kernels 2.6.13
	and newer: <tt>mkinitrd.yaird</tt> provided by the
	<tt>yaird</tt> package, and <tt>update-initramfs</tt> provided by
	<tt>initramfs-tools</tt>. The strategies these utilities use
	for initramfs creation are quite different. <tt>yaird</tt>
	performs a scan of the machine configuration at the kernel
	installation time and includes only the modules and programs
	which are required to initialize the device containing the
	current root filesystem. <tt>initramfs-tools</tt>, on the other hand,
	includes most of the controller drivers, as well as the tools
	to do automatic hardware detection from the initrd during
	boot.  The resulting initramfs is typically a few times larger
	than the one generated by <tt>yaird</tt>, however it comes with a
	greater flexibility.  For example, a disk containing a kernel
	and initramfs generated by <tt>initramfs-tools</tt> may be moved
	to another partition or machine and is likely to successfully
        boot there (attached to a different disk controller, let's say),
	than the one containing a <tt>yaird</tt>-generated initramfs. A
	detailed comparison of the features of two package is
	available on the <url id="http://wiki.debian.org" name="Debian
	Wiki"> page <url
	id="http://wiki.debian.org/InitrdReplacementOptions"
	name="InitrdReplacementOptions">. You can also consult the
	manual pages of the individual tools by runnning the commands
	<tt>man mkinitrd.yaird</tt> and <tt>man update-initramfs</tt>.
      </p>
      </sect>
      <sect id="initramfs-gen-process">
        <heading>Choosing the tool</heading>
      <p>
	At the end of the kernel package installation a script is
	automatically invoked to determine the availability of the
	initramfs-generating tools and run one of them. This script
	contains the list of all such tools available in Debian
	(currently there are three, two mentioned above and
	<tt>mkinitrd</tt> from the <tt>initrd-tools</tt> package,
	which is required to generate old-style initrds for older
	kernels). If the tool is installed (and the dependencies of
	the <tt>linux-image</tt> package ensure that at least one of
	them is installed), it will be queried (by running it with
	<tt>--supported-host-version</tt> and
	<tt>--supported-target-version</tt>) to determine whether it
	can be used to generate the initramfs for the new kernel version
	when running on a system with a current kernel version.  The
	first tool which is found to satisfy the criteria is going to
	be invoked, generating the new initramfs image and placing it
	into <tt>/boot</tt> directory. See the documentation of the
	individual tools for the supported ranges of kernel versions.
      </p>
      <p>
        The list of tools to be considered and the order in which they
	are tested may be controlled by placing a space-separated list
	of the executables into the <tt>ramdisk</tt> variable in
	<tt>/etc/kernel-img.conf</tt>. For example, the current
	default order is <tt>initramfs-tools</tt>, <tt>yaird</tt>, 
	<tt>initrd-tools</tt>.  If one prefers to use exclusively
	<tt>initramfs-tools</tt> with newer kernels, the following
	setting in <tt>/etc/kernel-img.conf</tt> will prevent the
	initrd generation script from considering <tt>yaird</tt> as
	a candidate:
	<example>
ramdisk = /usr/sbin/mkinitramfs-kpkg /usr/sbin/mkinitrd
        </example>
      </p>
      </sect>
      <sect id="initramfs-regen">
        <heading>Regenerating the initramfs</heading>
      <p>
        The <tt>ramdisk</tt> setting mentioned above will only take
	effect when implemented <em>before</em> the kernel image
	installation. If the changes are desired after the corresponding
	<tt>linux-image</tt> has been installed, the initramfs needs to
	be regenerated. This is achieved by the command
	<example>
# dpkg-reconfigure linux-image-2.6.17-1-686
        </example>
        where <tt>linux-image-2.6.17-1-686</tt> is the name of the
	kernel package for which the initrd regeneration is requested.
      </sect>
      <sect id="initramfs-exam">
        <heading>Examining the initramfs contents</heading>
	<p>
	Occasionally it is useful to examine the contents of initramfs
	to diagnose a problem or for educational purposes. The old-style
	initrds created by <tt>/usr/sbin/mkinitrd</tt> from <tt>initrd-tools</tt>
	package are either <tt>cramfs</tt> or <tt>ext2</tt> filesystem, so
	they need to be mounted to access their contents. This may be achieved
	with the commands like
	<example>
# mkdir -p /mnt/initrd
# mount -t cramfs /boot/initrd.img-2.6.12-1-686 /mnt/initrd -o loop
        </example>
	New style initramfs, created by <tt>yaird</tt> or <tt>initramfs-tools</tt>
	are compressed <tt>cpio</tt> archives, which may be extracted using the
	command 
	<example>
$ zcat /boot/initrd.img-2.6.17-1-686 | cpio -i
        </example>
	It will unpack the contents of the initramfs into the current directory.
      </sect>
    </chapt>
    <chapt id="bugs">
      <heading>Filing a bug against a kernel package</heading>
      <p>
        <em>This chapter is a WORK IN PROGRESS! The information here
	    has not been endorsed by all members of the kernel team
	    yet.
	</em>
      </p>
      <p>
        Debian kernel team keeps track of the kernel package bugs in
	the Debian Bug Tracking System (BTS). For information on how
	to use the system see <url id="http://bugs.debian.org"
	name="http://bugs.debian.org">.  You can also submit the bugs
	by using the <tt>reportbug</tt> command from the package with
	the same name. Please note that kernel bugs found in
	distributions derived from Debian (such as Knoppix, Mepis,
	Progeny, Ubuntu, Xandros, etc.) should <em>not</em> be
	reported to the Debian BTS (unless they can be also reproduced
	on a Debian system using official Debian kernel
	packages). Derived distributions have their own policies and
	procedures regarding kernel packaging, so the bugs found in
	them should be reported directly to their bug tracking systems
	or mailing lists.
      </p>
      <p>
        Nothing in this chapter is intended to keep you from filing a
	bug against one of the Debian kernel packages.  However, you should
	recognize that the resources of the Debian kernel team are
	limited, and efficient reaction to a bug is largely determined
	by the amount and quality of the information included in the
	bug report. Please help us to do a better job by using the
	following guidelines when preparing to file the bug against
	kernel packages:
      <list>
	<item>
	  <em>Do the research.</em> Before filing the bug search the
	  web for the particular error message or symptom you are
	  getting. As it is highly unlikely that you are the only
	  person experiencing a particular problem, there is always a
	  chance that it has been discussed elsewhere, and a possible
	  solution, patch, or workaround has been proposed. If such
	  information exists, always include the references to it in
	  your report. Check the <url id="http://bugs.debian.org/cgi-bin/pkgreport.cgi?src=linux-2.6" name="current bug list">
	  to see whether something similar has been reported already.
	</item>
	<item>
	  <em>Collect the information.</em> Please provide enough
	  information with your report. At a minimum, it should
	  contain the exact version of the official Debian kernel
	  package, where the bug is encountered, and steps to
	  reproduce it. Depending on the nature of the bug you
	  reporting, you might also want to include the output of
	  <tt>dmesg</tt> (or portions thereof), output of the
	  <tt>lspci -vn</tt>. If applicable,
	  include the information about the latest known kernel
	  version where the bug is not present, and output of the
	  above commands for the working kernel as well. Use
	  common sense and include other relevant information,
	  if you think that it might help in solving the problem.
	</item>
	<item>
	  <em>Try to reproduce the problem with "vanilla" kernel.</em>
	  If you have a chance, try to reproduce the problem by
	  building the binary kernel image from the "vanilla" kernel
	  source, available from <url id="http://www.kernel.org"
	  name="http://www.kernel.org"> or its mirrors, using the same
	  configuration as the Debian stock kernels. For more
	  information on how to do this, look at <ref
	  id="common-building">. If there is convincing evidence that
	  the buggy behavior is caused by the Debian-specific changes
	  to the kernel, the bug will usually be assigned higher
	  priority by the d-k team. If the bug is not specific for
	  Debian, check out the upstream <url
	  id="http://bugzilla.kernel.org" name="kernel bug database">
	  to see if it has been reported there. If you are sure that
	  it is an upstream problem, you can also report your bug
	  there (but submit it to Debian BTS anyway, so that we can
	  track it properly).
	</item>
        <item>
          <em>Use the correct package to report the bug against.</em>
	  All the binary kernel packages are produced from a single
	  <tt>linux-2.6</tt> source package. Because of that, the
	  usual way for d-k team members to scan for bugs is to look
	  at the list of bugs for the <tt>linux-2.6</tt> source
	  package, available at <url
	  id="http://bugs.debian.org/cgi-bin/pkgreport.cgi?src=linux-2.6"
	  name="http://bugs.debian.org/cgi-bin/pkgreport.cgi?src=linux-2.6">.
	  It is therefore crucial that you report the bug against one
	  of the binary packages listed on that page (check that it
	  shows up on that page after you do!). If in doubt, file the
	  bug against the binary package <tt>linux-2.6</tt>, which is
	  also built from the <tt>linux-2.6</tt> source. Failure to
	  follow that rule will drastically reduce the chances that
	  your bug will be noticed by the d-k team and acted upon.
        </item>
	<item>
	  <em>Bugs involving <tt>PREEMPT</tt>.</em> Even in the latest
	  kernels making the kernel preemptible (by enabling the
	  <tt>CONFIG_PREEMPT</tt> configuration option) will
	  occasionally lead to problems in form of occasional kernel
	  oops. For this reason this option is disabled in Debian
	  kernel packages, so problem can only be triggered with a
	  custom kernel. It is known to the upstream kernel developers
	  and it is most likely that d-k team will not be able to do
	  anything about it.
	</item>
	<item>
	  <em>Bugs involving ACPI.</em> While ACPI (Advanced Control
	  and Power Interface) support in Linux kernel has matured
	  greatly in the 2.6 series, it occasionally causes problems
	  (misrouted interrupts, failure to go into or return from the
	  sleep/hybernation/suspend mode) on newer laptop models. They
	  may be caused both by bugs in the kernel code or (more
	  likely) in the ACPI interface of a particular machine. As
	  resolution of such bugs requires access to the machine in
	  question, it is pretty unlikely that d-k team will be able
	  to do something about it. Consider reporting the problem to
	  the <url
	  id="http://vger.kernel.org/vger-lists.html#linux-acpi"
	  name="Linux ACPI mailing list"> along with the submission to
	  the Debian BTS. As a workaround, try booting the kernel with
	  some combination of boot options <tt>acpi=off</tt>,
	  <tt>pci=norouteirq</tt>, <tt>pci=noacpi</tt>, and
	  <tt>nolapic</tt> to see if that improves the situation.
	</item>
	<item>
	  <em>Bugs involving tainted kernels.</em> If a kernel
	  crashes, it would normally print out some debugging
	  information, indicating, among other things, whether the
	  running kernel has been tainted. The kernel is referred to
	  as tainted if at the time of the crash it had some binary
	  third-party modules loaded. As kernel developers do not
	  have access to the source code for such modules, problems
	  involving them are notoriously difficult to debug. It is
	  therefore strongly recommended to try and reproduce the
	  problem with an untainted kernel (by preventing the loading
	  of binary modules, for example). If the problem is due to
	  the presence of such modules, there is not much the kernel
	  community can do about it and it should be reported directly
	  to their authors.
	</item>
      </list>
      </p>
  </book>
</debiandoc>
<!-- vim:set ai et sts=2 sw=2 tw=76: -->
